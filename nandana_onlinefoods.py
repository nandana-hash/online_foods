# -*- coding: utf-8 -*-
"""nandana_onlinefoods.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E21umHRQEVKw51vcHEbGl5VNQOuxHej2
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
df=pd.read_csv('/content/onlinefoods.csv')
df

df.head()

df.tail()

df.shape

df.columns

df.dtypes

df.corr(numeric_only=True)

sns.heatmap(df.corr(numeric_only=True))

df.isna().sum()

x=df['Marital Status'].mode()[0]
df['Marital Status'].fillna(x,inplace=True)
df.isna().sum()

x=df['Occupation'].mode()[0]
df['Occupation'].fillna(x,inplace=True)
df.isna().sum()

x=df['Family size'].mode()[0]
df['Family size'].fillna(x,inplace=True)
df.isna().sum()

x=df['Feedback'].mode()[0]
df['Feedback'].fillna(x,inplace=True)
df.isna().sum()

df.drop(['Unnamed: 12'],axis=1,inplace=True)
df

plt.figure(figsize=(10, 6))
xx=df['Monthly Income'].unique()
yy=df['Monthly Income'].value_counts()
plt.pie(yy,labels=xx,autopct='%1.1f%%')
plt.title('Monthly Income Distribution', fontsize=17)
plt.legend(fontsize=7)

from sklearn.preprocessing import LabelEncoder
lb=LabelEncoder()
df['Gender']=lb.fit_transform(df['Gender'])
df['Marital Status']=lb.fit_transform(df['Marital Status'])
df['Occupation']=lb.fit_transform(df['Occupation'])
df['Monthly Income']=lb.fit_transform(df['Monthly Income'])
df['Educational Qualifications']=lb.fit_transform(df['Educational Qualifications'])
df['Feedback']=lb.fit_transform(df['Feedback'])
df.dtypes

sns.boxplot(x=df['Educational Qualifications'],y=df['Output'],data=df)

sns.boxplot(x=df['Feedback'],y=df['Output'],data=df)

x=df.drop(['Output'],axis=1).values
x

y=df['Output'].values
y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.30,random_state=42)
x_train

from sklearn.preprocessing import StandardScaler
scaler=StandardScaler()
scaler.fit(x_train)
x_train=scaler.transform(x_train)
x_test=scaler.transform(x_test)
y_train

from sklearn.neighbors import KNeighborsClassifier
knn=KNeighborsClassifier(n_neighbors=5)
knn.fit(x_train,y_train)
y_pred=knn.predict(x_test)
y_pred

from sklearn.metrics import confusion_matrix
cm=confusion_matrix(y_test,y_pred)
cm

from sklearn.metrics import ConfusionMatrixDisplay
labels=['Yes','No']
cmd=ConfusionMatrixDisplay(cm,display_labels=labels)
cmd.plot()

from sklearn.metrics import accuracy_score
ac=accuracy_score(y_test,y_pred)
ac